#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Вывести маршрут максимальной стоимости
======================================
В левом верхнем углу прямоугольной таблицы размером N×M находится черепашка.
В каждой клетке таблицы записано некоторое число.
Черепашка может перемещаться вправо или вниз,
при этом маршрут черепашки заканчивается в правом нижнем углу таблицы.

Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка
(включая начальную и конечную клетку).
Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

Входные данные:
В первой строке входных данных записаны два натуральных числа N и M,
не превосходящих 100 — размеры таблицы.
Далее идут N строк, каждая из которых содержит M чисел,
разделенных пробелами — описание таблицы.
Все числа в клетках таблицы целые и могут принимать значения
от 0 до 100.

Выходные данные:
Первая строка выходных данных содержит максимальную возможную сумму,
вторая — маршрут, на котором достигается эта сумма.
Маршрут выводится в виде последовательности, которая должна содержать N−1 букву D,
означающую передвижение вниз и M−1 букву R,
означающую передвижение направо.
Если таких последовательностей несколько, необходимо вывести ровно одну
(любую) из них.
"""

n, m = map(int, input().split())
w = [list(map(int, input().split())) for i in range(n)]

#in, m = 5, 5
#w = [[9, 9, 9, 9, 9],
#     [3, 0, 0, 0, 0],
#     [9, 9, 9, 9, 9],
#     [6, 6, 6, 6, 8],
#     [9, 9, 9, 9, 9]]

a = [[0]   * m for i in range(n)]
p = [[' '] * m for i in range(n)]

a[0][0] = w[0][0]

for i in range(1, n):
    a[i][0] = w[i][0] + a[i-1][0]
    p[i][0] = 'D'
  
for j in range(1, m):
    a[0][j] = w[0][j] + a[0][j-1]
    p[0][j] = 'R'

for i in range(1, n):
    for j in range(1, m):
        a1 = a[i-1][j]
        a2 = a[i][j-1]
        if a1 > a2:
            a[i][j] = w[i][j] + a1
            p[i][j] = 'D'
        else:
            a[i][j] = w[i][j] + a2
            p[i][j] = 'R'

#for row in a:
#    print(' '.join(map(lambda x: "%3i" % x, row)))

i = n - 1
j = m - 1
path = []
while i != 0 or j != 0:
    if p[i][j] == 'D':
        #p[i][j] = 'd'
        path.append('D')
        i -= 1
    else:
        #p[i][j] = 'r'
        path.append('R')
        j -= 1

#for row in p:
#    print(' '.join(row))

print(a[-1][-1])
print(" ".join(path[::-1]))

